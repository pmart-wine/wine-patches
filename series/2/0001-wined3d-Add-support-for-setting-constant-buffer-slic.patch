From 7f5eed9a0a7278af5d2d028c29f18056a577ba59 Mon Sep 17 00:00:00 2001
From: Kimmo Myllyvirta <kimmoXXXXXXXX>
Date: Sat, 2 Jun 2018 13:39:17 +0200
Subject: [PATCH 1/5] wined3d: Add support for setting constant buffer slices.

Signed-off-by: Pablo Martin <pmartXXXXXXXXX>
---
Remarks:

- changing cb pointer array to wined3d_constant_buffer structure array
  to better accommodate for new binding parameters.
- d3d11 is using constants as slice parameters, while wined3d is using bytes,
  this requires a correction factor of 16 since each constant is 16 bytes
  (4x32 bit components each):
  - would it be better to make wined3d also use constants?
  - is sizeof(struct wined3d_vec4) the best way to apply the correction?
  - Should we introduce a constant to refer to this size?
- Regarding naming, would 'slice' or 'range' better fit to referring to the
  offset+size mechanic?
- When setting NULL size and offset (either explicitly or because of using the
  old SetConstantBuffer method), size is internally set to 4096.
  - Should this undocumented behaviour be implemented?
- Offset and size parameters should be set in multiples of 16 constants.
  - Atm I'm checking against '& 0xff'. Should a constant be introduced here?
  - Should this check better done at the d3d11 side?

Pending issues:

- When binding a limited size inside the cb array, access beyond bounds
  is not returning 0 as it should.
- I have worked around some corner cases (offset beyond bounds or zero
  size), by setting offset to the end of the array, that seems to
  provide better behaviour. Fixing the former point would make this
  workaround unneeded.

 dlls/d3d11/device.c            | 24 ++++++++++++++----------
 dlls/wined3d/context.c         |  4 ++--
 dlls/wined3d/cs.c              | 20 +++++++++++++-------
 dlls/wined3d/device.c          | 33 ++++++++++++++++++++++++++-------
 dlls/wined3d/state.c           | 18 +++++++++++++++---
 dlls/wined3d/stateblock.c      |  4 ++--
 dlls/wined3d/wined3d.spec      |  2 +-
 dlls/wined3d/wined3d_private.h | 14 ++++++++++++--
 include/wine/wined3d.h         |  2 +-
 9 files changed, 86 insertions(+), 35 deletions(-)

diff --git a/dlls/d3d11/device.c b/dlls/d3d11/device.c
index e7dd62cb3c..64a9b98477 100644
--- a/dlls/d3d11/device.c
+++ b/dlls/d3d11/device.c
@@ -124,10 +124,12 @@ static void d3d11_immediate_context_get_constant_buffers(ID3D11DeviceContext1 *i
 }
 
 static void d3d11_immediate_context_set_constant_buffers(ID3D11DeviceContext1 *iface,
-        enum wined3d_shader_type type, UINT start_slot, UINT buffer_count, ID3D11Buffer *const *buffers)
+        enum wined3d_shader_type type, UINT start_slot, UINT buffer_count, ID3D11Buffer *const *buffers,
+        const UINT *first_constant, const UINT *num_constants)
 {
     struct d3d_device *device = device_from_immediate_ID3D11DeviceContext1(iface);
     unsigned int i;
+    BOOL is_slice = first_constant && num_constants;
 
     wined3d_mutex_lock();
     for (i = 0; i < buffer_count; ++i)
@@ -135,7 +137,9 @@ static void d3d11_immediate_context_set_constant_buffers(ID3D11DeviceContext1 *i
         struct d3d_buffer *buffer = unsafe_impl_from_ID3D11Buffer(buffers[i]);
 
         wined3d_device_set_constant_buffer(device->wined3d_device, type, start_slot + i,
-                buffer ? buffer->wined3d_buffer : NULL);
+                buffer ? buffer->wined3d_buffer : NULL,
+                is_slice ? first_constant[i] * sizeof(struct wined3d_vec4) : 0,
+                is_slice ? num_constants[i] * sizeof(struct wined3d_vec4) : 0);
     }
     wined3d_mutex_unlock();
 }
@@ -187,7 +191,7 @@ static void STDMETHODCALLTYPE d3d11_immediate_context_VSSetConstantBuffers(ID3D1
             iface, start_slot, buffer_count, buffers);
 
     d3d11_immediate_context_set_constant_buffers(iface, WINED3D_SHADER_TYPE_VERTEX, start_slot,
-            buffer_count, buffers);
+            buffer_count, buffers, NULL, NULL);
 }
 
 static void STDMETHODCALLTYPE d3d11_immediate_context_PSSetShaderResources(ID3D11DeviceContext1 *iface,
@@ -339,7 +343,7 @@ static void STDMETHODCALLTYPE d3d11_immediate_context_PSSetConstantBuffers(ID3D1
             iface, start_slot, buffer_count, buffers);
 
     d3d11_immediate_context_set_constant_buffers(iface, WINED3D_SHADER_TYPE_PIXEL, start_slot,
-            buffer_count, buffers);
+            buffer_count, buffers, NULL, NULL);
 }
 
 static void STDMETHODCALLTYPE d3d11_immediate_context_IASetInputLayout(ID3D11DeviceContext1 *iface,
@@ -432,7 +436,7 @@ static void STDMETHODCALLTYPE d3d11_immediate_context_GSSetConstantBuffers(ID3D1
             iface, start_slot, buffer_count, buffers);
 
     d3d11_immediate_context_set_constant_buffers(iface, WINED3D_SHADER_TYPE_GEOMETRY, start_slot,
-            buffer_count, buffers);
+            buffer_count, buffers, NULL, NULL);
 }
 
 static void STDMETHODCALLTYPE d3d11_immediate_context_GSSetShader(ID3D11DeviceContext1 *iface,
@@ -1277,7 +1281,7 @@ static void STDMETHODCALLTYPE d3d11_immediate_context_HSSetConstantBuffers(ID3D1
             iface, start_slot, buffer_count, buffers);
 
     d3d11_immediate_context_set_constant_buffers(iface, WINED3D_SHADER_TYPE_HULL, start_slot,
-            buffer_count, buffers);
+            buffer_count, buffers, NULL, NULL);
 }
 
 static void STDMETHODCALLTYPE d3d11_immediate_context_DSSetShaderResources(ID3D11DeviceContext1 *iface,
@@ -1344,7 +1348,7 @@ static void STDMETHODCALLTYPE d3d11_immediate_context_DSSetConstantBuffers(ID3D1
             iface, start_slot, buffer_count, buffers);
 
     d3d11_immediate_context_set_constant_buffers(iface, WINED3D_SHADER_TYPE_DOMAIN, start_slot,
-            buffer_count, buffers);
+            buffer_count, buffers, NULL, NULL);
 }
 
 static void STDMETHODCALLTYPE d3d11_immediate_context_CSSetShaderResources(ID3D11DeviceContext1 *iface,
@@ -1431,7 +1435,7 @@ static void STDMETHODCALLTYPE d3d11_immediate_context_CSSetConstantBuffers(ID3D1
             iface, start_slot, buffer_count, buffers);
 
     d3d11_immediate_context_set_constant_buffers(iface, WINED3D_SHADER_TYPE_COMPUTE, start_slot,
-            buffer_count, buffers);
+            buffer_count, buffers, NULL, NULL);
 }
 
 static void STDMETHODCALLTYPE d3d11_immediate_context_VSGetConstantBuffers(ID3D11DeviceContext1 *iface,
@@ -2417,7 +2421,7 @@ static void STDMETHODCALLTYPE d3d11_immediate_context_ClearState(ID3D11DeviceCon
     for (i = 0; i < WINED3D_SHADER_TYPE_COUNT; ++i)
     {
         for (j = 0; j < D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT; ++j)
-            wined3d_device_set_constant_buffer(device->wined3d_device, i, j, NULL);
+            wined3d_device_set_constant_buffer(device->wined3d_device, i, j, NULL, 0, 0);
     }
     for (i = 0; i < D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT; ++i)
     {
@@ -3924,7 +3928,7 @@ static void d3d10_device_set_constant_buffers(ID3D10Device1 *iface,
         struct d3d_buffer *buffer = unsafe_impl_from_ID3D10Buffer(buffers[i]);
 
         wined3d_device_set_constant_buffer(device->wined3d_device, type, start_slot + i,
-                buffer ? buffer->wined3d_buffer : NULL);
+                buffer ? buffer->wined3d_buffer : NULL, 0, 0);
     }
     wined3d_mutex_unlock();
 }
diff --git a/dlls/wined3d/context.c b/dlls/wined3d/context.c
index 21ad11d958..55a08a3e33 100644
--- a/dlls/wined3d/context.c
+++ b/dlls/wined3d/context.c
@@ -3743,8 +3743,8 @@ static void context_load_shader_resources(struct wined3d_context *context, const
 
         for (j = 0; j < WINED3D_MAX_CBS; ++j)
         {
-            if (state->cb[i][j])
-                wined3d_buffer_load(state->cb[i][j], context, state);
+            if (state->constant_buffer[i][j].buffer)
+                wined3d_buffer_load(state->constant_buffer[i][j].buffer, context, state);
         }
 
         for (j = 0; j < shader->reg_maps.sampler_map.count; ++j)
diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 3f1ca8ce65..f0b6d04de8 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -210,6 +210,8 @@ struct wined3d_cs_set_constant_buffer
     enum wined3d_shader_type type;
     UINT cb_idx;
     struct wined3d_buffer *buffer;
+    UINT offset;
+    UINT size;
 };
 
 struct wined3d_cs_set_texture
@@ -631,8 +633,8 @@ static void acquire_shader_resources(const struct wined3d_state *state, unsigned
 
         for (j = 0; j < WINED3D_MAX_CBS; ++j)
         {
-            if (state->cb[i][j])
-                wined3d_resource_acquire(&state->cb[i][j]->resource);
+            if (state->constant_buffer[i][j].buffer)
+                wined3d_resource_acquire(&state->constant_buffer[i][j].buffer->resource);
         }
 
         for (j = 0; j < shader->reg_maps.sampler_map.count; ++j)
@@ -664,8 +666,8 @@ static void release_shader_resources(const struct wined3d_state *state, unsigned
 
         for (j = 0; j < WINED3D_MAX_CBS; ++j)
         {
-            if (state->cb[i][j])
-                wined3d_resource_release(&state->cb[i][j]->resource);
+            if (state->constant_buffer[i][j].buffer)
+                wined3d_resource_release(&state->constant_buffer[i][j].buffer->resource);
         }
 
         for (j = 0; j < shader->reg_maps.sampler_map.count; ++j)
@@ -1234,8 +1236,10 @@ static void wined3d_cs_exec_set_constant_buffer(struct wined3d_cs *cs, const voi
     const struct wined3d_cs_set_constant_buffer *op = data;
     struct wined3d_buffer *prev;
 
-    prev = cs->state.cb[op->type][op->cb_idx];
-    cs->state.cb[op->type][op->cb_idx] = op->buffer;
+    prev = cs->state.constant_buffer[op->type][op->cb_idx].buffer;
+    cs->state.constant_buffer[op->type][op->cb_idx].buffer = op->buffer;
+    cs->state.constant_buffer[op->type][op->cb_idx].offset = op->offset;
+    cs->state.constant_buffer[op->type][op->cb_idx].size = op->size;
 
     if (op->buffer)
         InterlockedIncrement(&op->buffer->resource.bind_count);
@@ -1246,7 +1250,7 @@ static void wined3d_cs_exec_set_constant_buffer(struct wined3d_cs *cs, const voi
 }
 
 void wined3d_cs_emit_set_constant_buffer(struct wined3d_cs *cs, enum wined3d_shader_type type,
-        UINT cb_idx, struct wined3d_buffer *buffer)
+        UINT cb_idx, struct wined3d_buffer *buffer, UINT offset, UINT size)
 {
     struct wined3d_cs_set_constant_buffer *op;
 
@@ -1255,6 +1259,8 @@ void wined3d_cs_emit_set_constant_buffer(struct wined3d_cs *cs, enum wined3d_sha
     op->type = type;
     op->cb_idx = cb_idx;
     op->buffer = buffer;
+    op->offset = offset;
+    op->size = size;
 
     cs->ops->submit(cs, WINED3D_CS_QUEUE_DEFAULT);
 }
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 8ef74b6ef0..16556274b1 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -2228,27 +2228,46 @@ struct wined3d_shader * CDECL wined3d_device_get_vertex_shader(const struct wine
 }
 
 void CDECL wined3d_device_set_constant_buffer(struct wined3d_device *device,
-        enum wined3d_shader_type type, UINT idx, struct wined3d_buffer *buffer)
+        enum wined3d_shader_type type, UINT idx, struct wined3d_buffer *buffer,
+        UINT offset, UINT size)
 {
     struct wined3d_buffer *prev;
+    UINT prev_offset, prev_size;
 
-    TRACE("device %p, type %#x, idx %u, buffer %p.\n", device, type, idx, buffer);
+    TRACE("device %p, type %#x, idx %u, buffer %p, offset %u, size %u.\n",
+            device, type, idx, buffer, offset, size);
 
     if (idx >= MAX_CONSTANT_BUFFERS)
     {
         WARN("Invalid constant buffer index %u.\n", idx);
         return;
     }
+    if (offset & 0xff || size & 0xff)
+    {
+        WARN("Offset and size must be multiples of 16 %u %u.\n", offset, size);
+        return;
+    }
+    if (size > MAX_IMMEDIATE_CONSTANT_BUFFER_SIZE*sizeof(struct wined3d_vec4))
+    {
+        WARN("Size value too big %u.\n", size);
+        return;
+    }
+    if (size == 0 || offset+size > buffer->desc.byte_width)
+        FIXME("Access beyond end of buffer partially implemented.\n");
 
-    prev = device->update_state->cb[type][idx];
-    if (buffer == prev)
+    prev = device->update_state->constant_buffer[type][idx].buffer;
+    prev_offset = device->update_state->constant_buffer[type][idx].offset;
+    prev_size = device->update_state->constant_buffer[type][idx].size;
+    if (buffer == prev && offset == prev_offset && size == prev_size)
         return;
 
     if (buffer)
         wined3d_buffer_incref(buffer);
-    device->update_state->cb[type][idx] = buffer;
+    device->update_state->constant_buffer[type][idx].buffer = buffer;
+    device->update_state->constant_buffer[type][idx].offset = offset;
+    device->update_state->constant_buffer[type][idx].size = size;
     if (!device->recording)
-        wined3d_cs_emit_set_constant_buffer(device->cs, type, idx, buffer);
+        wined3d_cs_emit_set_constant_buffer(device->cs, type, idx, buffer, offset, size);
     if (prev)
         wined3d_buffer_decref(prev);
 }
@@ -2264,7 +2283,7 @@ struct wined3d_buffer * CDECL wined3d_device_get_constant_buffer(const struct wi
         return NULL;
     }
 
-    return device->state.cb[shader_type][idx];
+    return device->state.constant_buffer[shader_type][idx].buffer;
 }
 
 static void wined3d_device_set_shader_resource_view(struct wined3d_device *device,
diff --git a/dlls/wined3d/state.c b/dlls/wined3d/state.c
index 3b2f84538d..173aac11d0 100644
--- a/dlls/wined3d/state.c
+++ b/dlls/wined3d/state.c
@@ -4397,7 +4397,7 @@ static void state_cb(struct wined3d_context *context, const struct wined3d_state
     const struct wined3d_gl_info *gl_info = context->gl_info;
     enum wined3d_shader_type shader_type;
     struct wined3d_buffer *buffer;
-    unsigned int i, base, count;
+    unsigned int i, base, count, offset, size;
 
     TRACE("context %p, state %p, state_id %#x.\n", context, state, state_id);
 
@@ -4409,8 +4409,20 @@ static void state_cb(struct wined3d_context *context, const struct wined3d_state
     wined3d_gl_limits_get_uniform_block_range(&gl_info->limits, shader_type, &base, &count);
     for (i = 0; i < count; ++i)
     {
-        buffer = state->cb[shader_type][i];
-        GL_EXTCALL(glBindBufferBase(GL_UNIFORM_BUFFER, base + i, buffer ? buffer->buffer_object : 0));
+        buffer = state->constant_buffer[shader_type][i].buffer;
+        offset = state->constant_buffer[shader_type][i].offset;
+        size = state->constant_buffer[shader_type][i].size;
+        if (buffer && (offset || size != 4096 * sizeof(struct wined3d_vec4)))
+        {
+            if (size == 0 || offset > buffer->desc.byte_width)
+            {
+                size = buffer->desc.byte_width;
+                offset = buffer->desc.byte_width;
+            }
+            GL_EXTCALL(glBindBufferRange(GL_UNIFORM_BUFFER, base + i, buffer ? buffer->buffer_object : 0, offset, size));
+        }
+        else
+            GL_EXTCALL(glBindBufferBase(GL_UNIFORM_BUFFER, base + i, buffer ? buffer->buffer_object : 0));
     }
     checkGLcall("bind constant buffers");
 }
diff --git a/dlls/wined3d/stateblock.c b/dlls/wined3d/stateblock.c
index b4d17517b4..6cbe9f10dd 100644
--- a/dlls/wined3d/stateblock.c
+++ b/dlls/wined3d/stateblock.c
@@ -481,9 +481,9 @@ void state_unbind_resources(struct wined3d_state *state)
 
         for (j = 0; j < MAX_CONSTANT_BUFFERS; ++j)
         {
-            if ((buffer = state->cb[i][j]))
+            if ((buffer = state->constant_buffer[i][j].buffer))
             {
-                state->cb[i][j] = NULL;
+                state->constant_buffer[i][j].buffer = NULL;
                 wined3d_buffer_decref(buffer);
             }
         }
diff --git a/dlls/wined3d/wined3d.spec b/dlls/wined3d/wined3d.spec
index 93cecf0d3b..3cff133e64 100644
--- a/dlls/wined3d/wined3d.spec
+++ b/dlls/wined3d/wined3d.spec
@@ -132,7 +132,7 @@
 @ cdecl wined3d_device_set_clip_plane(ptr long ptr)
 @ cdecl wined3d_device_set_clip_status(ptr ptr)
 @ cdecl wined3d_device_set_compute_shader(ptr ptr)
-@ cdecl wined3d_device_set_constant_buffer(ptr long long ptr)
+@ cdecl wined3d_device_set_constant_buffer(ptr long long ptr long long)
 @ cdecl wined3d_device_set_cs_resource_view(ptr long ptr)
 @ cdecl wined3d_device_set_cs_sampler(ptr long ptr)
 @ cdecl wined3d_device_set_cs_uav(ptr long ptr long)
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 33bc463b94..55c2770575 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2796,6 +2796,13 @@ struct wined3d_blend_state
     struct wined3d_device *device;
 };
 
+struct wined3d_constant_buffer
+{
+    struct wined3d_buffer *buffer;
+    UINT offset;
+    UINT size;
+};
+
 struct wined3d_rasterizer_state
 {
     LONG refcount;
@@ -2844,7 +2851,7 @@ struct wined3d_state
     BOOL predicate_value;
 
     struct wined3d_shader *shader[WINED3D_SHADER_TYPE_COUNT];
-    struct wined3d_buffer *cb[WINED3D_SHADER_TYPE_COUNT][MAX_CONSTANT_BUFFERS];
+    struct wined3d_constant_buffer constant_buffer[WINED3D_SHADER_TYPE_COUNT][MAX_CONSTANT_BUFFERS];
     struct wined3d_sampler *sampler[WINED3D_SHADER_TYPE_COUNT][MAX_SAMPLER_OBJECTS];
     struct wined3d_shader_resource_view *shader_resource_view[WINED3D_SHADER_TYPE_COUNT][MAX_SHADER_RESOURCE_VIEWS];
     struct wined3d_unordered_access_view *unordered_access_view[WINED3D_PIPELINE_COUNT][MAX_UNORDERED_ACCESS_VIEWS];
@@ -3582,7 +3589,7 @@ void wined3d_cs_emit_set_clip_plane(struct wined3d_cs *cs, UINT plane_idx,
 void wined3d_cs_emit_set_color_key(struct wined3d_cs *cs, struct wined3d_texture *texture,
         WORD flags, const struct wined3d_color_key *color_key) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_set_constant_buffer(struct wined3d_cs *cs, enum wined3d_shader_type type,
-        UINT cb_idx, struct wined3d_buffer *buffer) DECLSPEC_HIDDEN;
+        UINT cb_idx, struct wined3d_buffer *buffer, UINT offset, UINT size) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_set_depth_stencil_view(struct wined3d_cs *cs,
         struct wined3d_rendertarget_view *view) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_set_index_buffer(struct wined3d_cs *cs, struct wined3d_buffer *buffer,
diff --git a/include/wine/wined3d.h b/include/wine/wined3d.h
index 5f54826b56..a370cd82bc 100644
--- a/include/wine/wined3d.h
+++ b/include/wine/wined3d.h
@@ -2376,7 +2376,7 @@ HRESULT __cdecl wined3d_device_set_clip_status(struct wined3d_device *device,
         const struct wined3d_clip_status *clip_status);
 void __cdecl wined3d_device_set_compute_shader(struct wined3d_device *device, struct wined3d_shader *shader);
 void __cdecl wined3d_device_set_constant_buffer(struct wined3d_device *device, enum wined3d_shader_type type, UINT idx,
-        struct wined3d_buffer *buffer);
+        struct wined3d_buffer *buffer, UINT offset, UINT size);
 void __cdecl wined3d_device_set_cs_resource_view(struct wined3d_device *device,
         unsigned int idx, struct wined3d_shader_resource_view *view);
 void __cdecl wined3d_device_set_cs_sampler(struct wined3d_device *device,
-- 
2.17.0

