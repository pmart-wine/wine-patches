From d447bc89cdcd2634069c0f62056cd3ebb88400ea Mon Sep 17 00:00:00 2001
From: Pablo Martin <pmartXXXXXXX>
Date: Sat, 2 Jun 2018 13:13:43 +0200
Subject: [PATCH 3/5] d3d11/tests: Add tests for constant buffer offsetting.

Signed-off-by: Pablo Martin <pmartXXXXXXXXX>
---
 dlls/d3d11/tests/d3d11.c | 411 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 411 insertions(+)

diff --git a/dlls/d3d11/tests/d3d11.c b/dlls/d3d11/tests/d3d11.c
index 1043722eb5..ef1c3223d2 100644
--- a/dlls/d3d11/tests/d3d11.c
+++ b/dlls/d3d11/tests/d3d11.c
@@ -11329,6 +11329,415 @@ static void test_fragment_coords(void)
     release_test_context(&test_context);
 }
 
+#define check_get_buffers_offset(a, b, c, d) check_get_buffers_offset_(__LINE__, a, b, c, d)
+static void check_get_buffers_offset_(unsigned int line, struct d3d11_test_context *test_context,
+        unsigned int elements, unsigned int *expected_offset, unsigned int *expected_size)
+{
+    ID3D11DeviceContext1 *context1;
+    ID3D11Buffer *ps_cb_result[] = {NULL, NULL};
+    unsigned int offset_result[] = {-1, -1};
+    unsigned int size_result[] = {-1, -1};
+    unsigned int i;
+
+    ID3D11DeviceContext_QueryInterface(test_context->immediate_context, &IID_ID3D11DeviceContext1,
+            (void **)&context1);
+
+    ID3D11DeviceContext1_PSGetConstantBuffers1(context1, 0, elements, ps_cb_result, offset_result, size_result);
+
+    for(i=0; i<elements; ++i)
+    {
+        ok_(__FILE__, line)(offset_result[i] == expected_offset[i] && size_result[i] == expected_size[i],
+                "Got unexpected offset and size, %u %u.\n", offset_result[i], size_result[i]);
+        if (ps_cb_result[i])
+            ID3D11Buffer_Release(ps_cb_result[i]);
+    }
+
+    ID3D11DeviceContext1_Release(context1);
+}
+
+#define check_draw_buffers_offset(a, b, c, d) check_draw_buffers_offset_(__LINE__, a, b, c, d)
+static void check_draw_buffers_offset_(unsigned int line, struct d3d11_test_context *test_context,
+        unsigned int res_x, unsigned int res_y, unsigned int expected_color)
+{
+    DWORD color;
+
+    draw_quad(test_context);
+
+    color = get_texture_color(test_context->backbuffer, res_x, res_y);
+    ok_(__FILE__, line)(compare_color(color, expected_color, 1), "Got unexpected color 0x%08x.\n", color);
+}
+
+#define check_simple_buffer_offset(a, b, c, d, e, f) check_simple_buffer_offset_(__LINE__, a, b, c, d, e, f)
+static void check_simple_buffer_offset_(unsigned int line, struct d3d11_test_context *test_context,
+        unsigned int expected_offset, unsigned int expected_size,
+        unsigned int res_x, unsigned int res_y, unsigned int expected_color)
+{
+    check_draw_buffers_offset_(line, test_context, res_x, res_y, expected_color);
+    check_get_buffers_offset_(line, test_context, 1, &expected_offset, &expected_size);
+}
+
+
+static void test_buffer_offset(void)
+{
+    struct d3d11_test_context test_context;
+    ID3D11PixelShader *ps;
+    ID3D11DeviceContext *context;
+    ID3D11DeviceContext1 *context1;
+    ID3D11Device *device;
+    ID3D11Buffer *ps_cb, *ps_cb_result = NULL;
+    HRESULT hr;
+
+    static const DWORD ps_code[] =
+    {
+#if 0
+        float2 cutoff;
+
+        float4 main(float4 position : SV_POSITION) : SV_TARGET
+        {
+            float4 ret = float4(0.0, 0.0, 0.0, 1.0);
+
+            if (position.x > cutoff.x)
+                ret.y = 1.0;
+            if (position.y > cutoff.y)
+                ret.z = 1.0;
+
+            return ret;
+        }
+#endif
+        0x43425844, 0x49fc9e51, 0x8068867d, 0xf20cfa39, 0xb8099e6b, 0x00000001, 0x00000144, 0x00000003,
+        0x0000002c, 0x00000060, 0x00000094, 0x4e475349, 0x0000002c, 0x00000001, 0x00000008, 0x00000020,
+        0x00000000, 0x00000001, 0x00000003, 0x00000000, 0x0000030f, 0x505f5653, 0x5449534f, 0x004e4f49,
+        0x4e47534f, 0x0000002c, 0x00000001, 0x00000008, 0x00000020, 0x00000000, 0x00000000, 0x00000003,
+        0x00000000, 0x0000000f, 0x545f5653, 0x45475241, 0xabab0054, 0x52444853, 0x000000a8, 0x00000040,
+        0x0000002a, 0x04000059, 0x00208e46, 0x00000000, 0x00000001, 0x04002064, 0x00101032, 0x00000000,
+        0x00000001, 0x03000065, 0x001020f2, 0x00000000, 0x02000068, 0x00000001, 0x08000031, 0x00100032,
+        0x00000000, 0x00208046, 0x00000000, 0x00000000, 0x00101046, 0x00000000, 0x0a000001, 0x00102062,
+        0x00000000, 0x00100106, 0x00000000, 0x00004002, 0x00000000, 0x3f800000, 0x3f800000, 0x00000000,
+        0x08000036, 0x00102092, 0x00000000, 0x00004002, 0x00000000, 0x00000000, 0x00000000, 0x3f800000,
+        0x0100003e,
+    };
+    unsigned int offset[] = {16};
+    unsigned int size[] = {16};
+    unsigned int offset_result = 0;
+    unsigned int size_result = 0;
+
+    struct vec4 cutoff[48];
+    memset(cutoff, 0, sizeof(cutoff));
+    cutoff[0].x = 318.0f;
+    cutoff[0].y = 240.0f;
+    cutoff[16].x = 320.0f;
+    cutoff[16].y = 240.0f;
+    cutoff[32].x = 16.0f;
+    cutoff[32].y = 16.0f;
+
+    if (!init_test_context(&test_context, NULL))
+        return;
+
+    device = test_context.device;
+    context = test_context.immediate_context;
+
+    hr = ID3D11DeviceContext_QueryInterface(context, &IID_ID3D11DeviceContext1, (void **)&context1);
+    ok(SUCCEEDED(hr) || broken(hr == E_NOINTERFACE) /* Not available on all Windows versions. */,
+            "Failed to query ID3D11DeviceContext1, hr %#x.\n", hr);
+    if (!SUCCEEDED(hr))
+    {
+        release_test_context(&test_context);
+        return;
+    }
+
+    hr = ID3D11Device_CreatePixelShader(device, ps_code, sizeof(ps_code), NULL, &ps);
+    ok(SUCCEEDED(hr), "Failed to create pixel shader, hr %#x.\n", hr);
+
+    ID3D11DeviceContext_PSSetShader(context, ps, NULL, 0);
+
+    ps_cb = create_buffer(device, D3D11_BIND_CONSTANT_BUFFER, sizeof(cutoff), cutoff);
+
+    /* offset 16 */
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 16, 16, 319, 239, 0xff000000);
+    check_simple_buffer_offset(&test_context, 16, 16, 320, 239, 0xff00ff00);
+
+    /* offset 0 */
+    offset[0] = 0;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 0, 16, 319, 239, 0xff00ff00);
+
+    /* offset 32 */
+    offset[0] = 32;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 32, 16, 14, 14, 0xff000000);
+    check_simple_buffer_offset(&test_context, 32, 16, 18, 18, 0xffffff00);
+
+    /* Set through context and get through context1 */
+    ID3D11DeviceContext_PSSetConstantBuffers(context, 0, 1, &ps_cb);
+    check_simple_buffer_offset(&test_context, 0, 4096, 319, 239, 0xff00ff00);
+
+    /* change offset */
+    offset[0] = 16;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 16, 16, 320, 239, 0xff00ff00);
+
+    /* NULL offset and size */
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, NULL, NULL);
+    check_simple_buffer_offset(&test_context, 0, 4096, 319, 239, 0xff00ff00);
+
+    /* set offset again */
+    offset[0] = 16;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 16, 16, 320, 239, 0xff00ff00);
+
+    /* bad offset value */
+    offset[0] = 17;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 16, 16, 320, 239, 0xff00ff00);
+
+    /* bad size value */
+    offset[0] = 16;
+    size[0] = 17;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 16, 16, 320, 239, 0xff00ff00);
+
+    /* size bigger than buffer */
+    offset[0] = 16;
+    size[0] = 128;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 16, 128, 320, 239, 0xff00ff00);
+
+    /* just get some of the optional arguments */
+    offset_result = 0;
+    ps_cb_result = NULL;
+    ID3D11DeviceContext1_PSGetConstantBuffers1(context1, 0, 1, &ps_cb_result, &offset_result, NULL);
+    ok(offset_result == 16, "Got unexpected offset, %u.\n", offset_result);
+    if (ps_cb_result)
+        ID3D11Buffer_Release(ps_cb_result);
+
+    size_result = 0;
+    ps_cb_result = NULL;
+    ID3D11DeviceContext1_PSGetConstantBuffers1(context1, 0, 1, &ps_cb_result, NULL, &size_result);
+    ok(size_result == 128, "Got unexpected size, %u.\n", size_result);
+    if (ps_cb_result)
+        ID3D11Buffer_Release(ps_cb_result);
+
+    /* CRASH on this tests (not sending buffer arguments)
+    ID3D11DeviceContext1_PSGetConstantBuffers1(context1, 0, 1, NULL, &offset_result, &size_result);
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, NULL, offset, size); */
+
+    /* reset */
+    offset[0] = 16;
+    size[0] = 16;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 16, 16, 320, 239, 0xff00ff00);
+
+    /* size 0 */
+    offset[0] = 16;
+    size[0] = 0;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 16, 0, 1, 1, 0xffffff00);
+
+    /* size 0 */
+    offset[0] = 32;
+    size[0] = 0;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 32, 0, 1, 1, 0xffffff00);
+
+    /* reset */
+    offset[0] = 16;
+    size[0] = 16;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 16, 16, 320, 239, 0xff00ff00);
+
+    /* size bigger than max */
+    offset[0] = 16;
+    size[0] = 4112;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 16, 16, 320, 239, 0xff00ff00);
+
+    /* max size */
+    offset[0] = 16;
+    size[0] = 4096;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 16, 4096, 320, 239, 0xff00ff00);
+
+    /* reset */
+    offset[0] = 16;
+    size[0] = 16;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 16, 16, 320, 239, 0xff00ff00);
+
+    /* offset greater than buffer size */
+    offset[0] = 64;
+    size[0] = 16;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 64, 16, 320, 239, 0xffffff00);
+
+    /* reset */
+    offset[0] = 16;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 16, 16, 320, 239, 0xff00ff00);
+
+    /* set both to 0 */
+    offset[0] = 0;
+    size[0] = 0;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 1, &ps_cb, offset, size);
+    check_simple_buffer_offset(&test_context, 0, 0, 320, 239, 0xffffff00);
+
+    /* clean up */
+    ID3D11Buffer_Release(ps_cb);
+    ID3D11DeviceContext1_Release(context1);
+    ID3D11PixelShader_Release(ps);
+    release_test_context(&test_context);
+}
+
+static void test_buffer_offset2(void)
+{
+    struct d3d11_test_context test_context;
+    ID3D11PixelShader *ps;
+    ID3D11DeviceContext *context;
+    ID3D11DeviceContext1 *context1;
+    ID3D11Device *device;
+    ID3D11Buffer *ps_cb[2];
+    HRESULT hr;
+
+    static const DWORD ps_code[] =
+    {
+#if 0
+        cbuffer myBuffer: register(b0)
+        {
+            float4 cutoff[17];
+        }
+
+        cbuffer myBuffer2: register(b1)
+        {
+            float4 color;
+        }
+
+
+        float4 main(float4 position : SV_POSITION) : SV_TARGET
+        {
+            float4 ret = color;
+
+            if (position.x > cutoff[0].x)
+                ret.g = 1.0;
+            if (position.y > cutoff[16].x)
+                ret.b = 1.0;
+
+            return ret;
+        }
+#endif
+        0x43425844, 0x3d15e1a4, 0x1f346e58, 0x7f1324b0, 0x3a489325, 0x00000001, 0x00000194, 0x00000003,
+        0x0000002c, 0x00000060, 0x00000094, 0x4e475349, 0x0000002c, 0x00000001, 0x00000008, 0x00000020,
+        0x00000000, 0x00000001, 0x00000003, 0x00000000, 0x0000030f, 0x505f5653, 0x5449534f, 0x004e4f49,
+        0x4e47534f, 0x0000002c, 0x00000001, 0x00000008, 0x00000020, 0x00000000, 0x00000000, 0x00000003,
+        0x00000000, 0x0000000f, 0x545f5653, 0x45475241, 0xabab0054, 0x52444853, 0x000000f8, 0x00000040,
+        0x0000003e, 0x04000059, 0x00208e46, 0x00000000, 0x00000011, 0x04000059, 0x00208e46, 0x00000001,
+        0x00000001, 0x04002064, 0x00101032, 0x00000000, 0x00000001, 0x03000065, 0x001020f2, 0x00000000,
+        0x02000068, 0x00000001, 0x08000031, 0x00100012, 0x00000000, 0x0020800a, 0x00000000, 0x00000000,
+        0x0010100a, 0x00000000, 0x0a000037, 0x00102022, 0x00000000, 0x0010000a, 0x00000000, 0x00004001,
+        0x3f800000, 0x0020801a, 0x00000001, 0x00000000, 0x08000031, 0x00100012, 0x00000000, 0x0020800a,
+        0x00000000, 0x00000010, 0x0010101a, 0x00000000, 0x0a000037, 0x00102042, 0x00000000, 0x0010000a,
+        0x00000000, 0x00004001, 0x3f800000, 0x0020802a, 0x00000001, 0x00000000, 0x06000036, 0x00102092,
+        0x00000000, 0x00208c06, 0x00000001, 0x00000000, 0x0100003e,
+    };
+    unsigned int offset[] = {0, 0};
+    unsigned int size[] = {32, 64};
+
+    struct vec4 cutoffs[64];
+    struct vec4 colors[32];
+    memset(cutoffs, 0, sizeof(cutoffs));
+    memset(colors, 0, sizeof(colors));
+    cutoffs[0].x = 320.0f;
+    cutoffs[16].x = 240.0f;
+    cutoffs[32].x = 16.0f;
+    cutoffs[48].x = 16.0f;
+    colors[0].x = 1.0f;
+    colors[0].w = 0.5f;
+    colors[16].x = 0.5f;
+    colors[16].w = 1.0f;
+
+    if (!init_test_context(&test_context, NULL))
+        return;
+
+    device = test_context.device;
+    context = test_context.immediate_context;
+
+    hr = ID3D11DeviceContext_QueryInterface(context, &IID_ID3D11DeviceContext1, (void **)&context1);
+    ok(SUCCEEDED(hr) || broken(hr == E_NOINTERFACE) /* Not available on all Windows versions. */,
+            "Failed to query ID3D11DeviceContext1, hr %#x.\n", hr);
+
+    if (!SUCCEEDED(hr))
+    {
+        release_test_context(&test_context);
+        return;
+    }
+
+    hr = ID3D11Device_CreatePixelShader(device, ps_code, sizeof(ps_code), NULL, &ps);
+    ok(SUCCEEDED(hr), "Failed to create pixel shader, hr %#x.\n", hr);
+    ok(sizeof(struct vec4) == 16, "Bad vec4 size.\n");
+
+    ID3D11DeviceContext_PSSetShader(context, ps, NULL, 0);
+
+    ps_cb[0] = create_buffer(device, D3D11_BIND_CONSTANT_BUFFER, sizeof(cutoffs), cutoffs);
+    ps_cb[1] = create_buffer(device, D3D11_BIND_CONSTANT_BUFFER, sizeof(colors), colors);
+
+    /* initial setup */
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 2, ps_cb, offset, size);
+    check_draw_buffers_offset(&test_context, 319, 239, 0x7f0000ff);
+    check_draw_buffers_offset(&test_context, 320, 239, 0x7f00ffff);
+    check_get_buffers_offset(&test_context, 2, offset, size);
+
+    /* change offset */
+    offset[0] = 32;
+    offset[1] = 16;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 2, ps_cb, offset, size);
+    check_draw_buffers_offset(&test_context, 17, 15, 0xff00ff7f);
+    check_draw_buffers_offset(&test_context, 15, 17, 0xffff007f);
+    check_get_buffers_offset(&test_context, 2, offset, size);
+
+    /* limited size */
+    size[0] = 16;
+    offset[0] = 32;
+    offset[1] = 16;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 2, ps_cb, offset, size);
+    todo_wine check_draw_buffers_offset(&test_context, 17, 15, 0xffffff7f); /* FAILS, y=15 should be greater than beyond limits=0 */
+    check_draw_buffers_offset(&test_context, 15, 17, 0xffff007f);
+    check_get_buffers_offset(&test_context, 2, offset, size);
+
+    /* size beyond limits */
+    size[0] = 256;
+    size[1] = 256;
+    offset[0] = 32;
+    offset[1] = 16;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 2, ps_cb, offset, size);
+    check_draw_buffers_offset(&test_context, 17, 15, 0xff00ff7f);
+    check_draw_buffers_offset(&test_context, 15, 17, 0xffff007f);
+    check_get_buffers_offset(&test_context, 2, offset, size);
+
+    /* access beyond limits */
+    size[0] = 256;
+    size[1] = 256;
+    offset[0] = 48;
+    offset[1] = 16;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 0, 2, ps_cb, offset, size);
+    check_draw_buffers_offset(&test_context, 17, 1, 0xffffff7f);
+    check_draw_buffers_offset(&test_context, 15, 1, 0xffff007f);
+    check_get_buffers_offset(&test_context, 2, offset, size);
+
+    /* set only 2nd */
+    offset[1] = 0;
+    ID3D11DeviceContext1_PSSetConstantBuffers1(context1, 1, 1, ps_cb+1, offset+1, size+1);
+    check_draw_buffers_offset(&test_context, 17, 1, 0x7fffffff);
+    check_draw_buffers_offset(&test_context, 15, 1, 0x7fff00ff);
+    check_get_buffers_offset(&test_context, 2, offset, size);
+
+    /* clean up */
+    ID3D11Buffer_Release(ps_cb[0]);
+    ID3D11Buffer_Release(ps_cb[1]);
+    ID3D11DeviceContext1_Release(context1);
+    ID3D11PixelShader_Release(ps);
+    release_test_context(&test_context);
+}
+
+
 static void test_update_subresource(void)
 {
     struct d3d11_test_context test_context;
@@ -27560,6 +27969,8 @@ START_TEST(d3d11)
     run_for_each_feature_level(test_device_interfaces);
     test_get_immediate_context();
     test_create_texture1d();
+    test_buffer_offset();
+    test_buffer_offset2();
     test_texture1d_interfaces();
     test_create_texture2d();
     test_texture2d_interfaces();
-- 
2.17.0

